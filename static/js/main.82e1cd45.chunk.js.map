{"version":3,"sources":["components/search-box/search-box.jsx","components/card/card.jsx","components/card-list/card-list.jsx","components/loader/loader.jsx","App.js","reportWebVitals.js","serviceWorkerRegistration.js","index.js"],"names":["SearchBox","handleInput","className","type","onInput","placeholder","Card","name","email","website","src","height","width","alt","CardList","users","map","id","otherProps","style","opacity","margin","borderRadius","display","background","loaderStyle","justifyContent","alignItems","variants","start","scale","rotate","end","Loader","props","div","initial","animate","transition","repeat","repeatType","ease","duration","delay","App","useState","setUsers","useEffect","setTimeout","fetch","then","res","json","data","searchField","setSearchField","filteredUsers","filter","toLowerCase","includes","e","target","value","length","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.82e1cd45.chunk.js","sourcesContent":["import React from 'react';\nimport './style.scss';\n\nconst SearchBox = ({ handleInput }) => (\n  <div className='searchbox-container'>\n    <input type='search' onInput={handleInput} placeholder='Search robots...' />\n  </div>\n);\n\nexport default SearchBox;\n","import React from 'react';\nimport './style.scss';\n\nconst Card = ({ name, email, website }) => (\n  <div className='card-container'>\n    <img src={`https://robohash.org/robot/${name}?size=200x200`} height='200' width='200' alt='robot' />\n    <h2>{name}</h2>\n    <p>{email}</p>\n    <p>{website}</p>\n  </div>\n);\n\nexport default Card;\n","import React from 'react';\nimport './style.scss';\n\nimport Card from '../card/card';\n\nconst CardList = ({ users }) => (\n  <div className='cardlist-container'>\n    {users.map(({ id, ...otherProps }) => (\n      <Card key={id} {...otherProps} />\n    ))}\n  </div>\n);\n\nexport default CardList;\n","import React from 'react';\nimport { motion } from 'framer-motion';\n\nconst style = {\n  width: 15,\n  height: 15,\n  opacity: 1,\n  margin: 8,\n  borderRadius: 0,\n  display: 'inline-block',\n  background: '#7df9ff',\n};\n\nconst loaderStyle = {\n  height: '70vh',\n  // border: '1px solid red',\n  display: 'flex',\n  justifyContent: 'center',\n  alignItems: 'center',\n  width: '100%',\n};\n\nconst variants = {\n  start: {\n    scale: 0.2,\n    rotate: 0,\n  },\n  end: {\n    scale: 1,\n    rotate: 360,\n  },\n};\n\nexport default function Loader(props) {\n  return (\n    <div style={loaderStyle}>\n      <motion.div\n        style={style}\n        variants={variants}\n        initial={'start'}\n        animate={'end'}\n        transition={{\n          repeat: 'Infinity',\n          repeatType: 'mirror',\n          ease: 'anticipate',\n          duration: 1,\n          delay: 0,\n        }}\n      />\n      <motion.div\n        style={style}\n        variants={variants}\n        initial={'start'}\n        animate={'end'}\n        transition={{\n          repeat: 'Infinity',\n          repeatType: 'mirror',\n          ease: 'anticipate',\n          duration: 1,\n          delay: 0.2,\n        }}\n      />\n      <motion.div\n        style={style}\n        variants={variants}\n        initial={'start'}\n        animate={'end'}\n        transition={{\n          repeat: 'Infinity',\n          repeatType: 'mirror',\n          ease: 'anticipate',\n          duration: 1,\n          delay: 0.4,\n        }}\n      />\n    </div>\n  );\n}\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\n\nimport SearchBox from './components/search-box/search-box';\nimport CardList from './components/card-list/card-list';\nimport Loader from './components/loader/loader';\n\nfunction App() {\n  const [users, setUsers] = useState([]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      fetch('https://jsonplaceholder.typicode.com/users')\n        .then((res) => res.json())\n        .then((data) => setUsers(data));\n    }, 2000);\n  }, []);\n\n  const [searchField, setSearchField] = useState('');\n\n  const handleInput = (e) => {\n    setSearchField(e.target.value);\n  };\n\n  const filteredUsers = users.filter(({ name }) => name.toLowerCase().includes(`${searchField.toLowerCase()}`));\n\n  return (\n    <>\n      <h1 className='title'>Robofriends</h1>\n      <SearchBox handleInput={handleInput} />\n      {filteredUsers.length ? <CardList users={filteredUsers} /> : <Loader />}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log('This web app is being served cache-first by a service ' + 'worker. To learn more, visit https://cra.link/PWA');\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log('New content is available and will be used when all ' + 'tabs for this page are closed. See https://cra.link/PWA.');\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n"],"sourceRoot":""}